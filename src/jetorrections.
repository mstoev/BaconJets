#include "UHH2/bacon/include/selection.h"

#include "UHH2/bacondataformats/interface/TJet.hh"

namespace uhh2bacon {

Selection::Selection(uhh2::Context & ctx) :
    context(ctx),
    event(0)
{
  h_jets = context.declare_event_input<TClonesArray>("Jet05");
  h_eventInfo = context.declare_event_input<baconhep::TEventInfo>("Info");
}

void Selection::SetEvent(uhh2::Event& evt)
{
   event = &evt;
   assert(event);
}


bool Selection::Trigger()
{
  assert(event);

  const TClonesArray & js = event->get(h_jets);
  const baconhep::TEventInfo & info = event->get(h_eventInfo);

//   const baconhep::TJet * jet = dynamic_cast<const baconhep::TJet*>(js[0]);
//   assert(jet);

  baconhep::TEventInfo* eventInfo= new baconhep::TEventInfo(info);
  assert(eventInfo);

  baconhep::TJet* jet1 = (baconhep::TJet*)js[0];
  baconhep::TJet* jet2 = (baconhep::TJet*)js[1];

 double avePt = (jet1->pt + jet2->pt)/2;

 bool trigger40fired = false;
 bool trigger80fired = false;
 bool trigger140fired = false;
 bool trigger200fired = false;
 bool trigger260fired = false;
 bool trigger320fired = false;
 bool trigger400fired = false;


 if(eventInfo->triggerBits[0]==1)  trigger40fired = true;
 if(eventInfo->triggerBits[1]==1)  trigger80fired = true;
 if(eventInfo->triggerBits[2]==1)  trigger140fired = true;
 if(eventInfo->triggerBits[3]==1)  trigger200fired = true;
 if(eventInfo->triggerBits[4]==1)  trigger260fired = true;
 if(eventInfo->triggerBits[5]==1)  trigger320fired = true;
 if(eventInfo->triggerBits[6]==1)  trigger400fired = true;

 if (avePt < 66) return false;

 if (avePt >= 66  && avePt < 107 && trigger40fired) return true;
 if (avePt >= 107 && avePt < 191 && trigger80fired) return true;
 if (avePt >= 191 && avePt < 240 && trigger140fired) return true;
 if (avePt >= 240 && avePt < 306 && trigger200fired) return true;
 if (avePt >= 306 && avePt < 379 && trigger260fired) return true;
 if (avePt >= 379 && avePt < 468 && trigger320fired) return true;
 if (avePt >= 468 && trigger400fired) return true;

//   double triggerThreshold[6] = {92,157,218,280,346,432};
//   bool trigger_fired = false;
//   for (int j = 1; j < 7; j++) {
//     if(eventInfo->triggerBits[j]==1) {
//         if(avePt < triggerThreshold[j-1]){
//             trigger_fired = true;
//             break;
//         }
//     }
//   }
//   if(eventInfo->triggerBits.none() || !trigger_fired) return false;

 return false;
}

bool Selection::DiJet()
{
  assert(event);

  const TClonesArray & js = event->get(h_jets);
  const baconhep::TEventInfo & info = event->get(h_eventInfo);
  baconhep::TEventInfo* eventInfo= new baconhep::TEventInfo(info);
  assert(eventInfo);
//   const baconhep::TJet * jet = dynamic_cast<const baconhep::TJet*>(js[0]);
//   assert(jet);

  int njets = js.GetEntries();

  // njets >= 2
  if (njets>=2) return true;
  //std::cout << eventInfo->triggerBits << std::endl;
  return false;
}
bool Selection::DiJetAdvanced()
{
  assert(event);

  const TClonesArray & js = event->get(h_jets);

//   const baconhep::TJet * jet = dynamic_cast<const baconhep::TJet*>(js[0]);
//   assert(jet);

  int njets = js.GetEntries();

  // njets >= 2
  if (njets<2) return false;

  baconhep::TJet* jet1 = (baconhep::TJet*)js[0];
  baconhep::TJet* jet2 = (baconhep::TJet*)js[1];

  // at least one barrel jet
  if((fabs(jet1->eta)>=1.3) && (fabs(jet2->eta)>=1.3)) return false; 

  // delta phi < 2.7
  double deltaPhi = std::min(std::abs(double(jet1->phi) - double(jet2->phi)),2*M_PI-std::abs(jet2->phi - jet1->phi));
  if (deltaPhi < 2.7) return false;

  // |asymm| < 0.7
  if ((fabs(jet2->pt - jet1->pt) / (jet2->pt + jet1->pt)) > 0.7) return false;

  // p_t,rel < 0.2
  if (njets>2){
    baconhep::TJet* jet3 = (baconhep::TJet*)js[2];
    if ((2*(jet3->pt))/(jet1->pt + jet2->pt) > 0.2) return false;
  }

 return true;
}

bool Selection::JetMatching()
{
  assert(event);

  const TClonesArray & js = event->get(h_jets);
  const baconhep::TEventInfo & info = event->get(h_eventInfo);

  baconhep::TEventInfo* eventInfo= new baconhep::TEventInfo(info);
  assert(eventInfo);

  int njets = js.GetEntries();

  // njets >= 2
  if (njets<2) return false;

  baconhep::TJet* jet1 = (baconhep::TJet*)js[0];
  baconhep::TJet* jet2 = (baconhep::TJet*)js[1];

  double delra_R_jet1 = pow(pow(jet1->genphi - jet1->phi,2) + pow(jet1->geneta - jet1->eta,2),0.5);
  double delra_R_jet2 = pow(pow(jet2->genphi - jet2->phi,2) + pow(jet2->geneta - jet2->eta,2),0.5);

  if ((delra_R_jet1 > 0.3) || (delra_R_jet2 > 0.3)) return false;
  //std::cout << " runNum: "<< eventInfo->runNum<< " evtNum: "<< eventInfo->evtNum <<" delra_R_jet1 = "<< delra_R_jet1 << std::endl;

 return true;
}
bool Selection::JetResolutionSmearer()
{
  assert(event);

  const TClonesArray & js = event->get(h_jets);
  const baconhep::TEventInfo & info = event->get(h_eventInfo);

  baconhep::TEventInfo* eventInfo= new baconhep::TEventInfo(info);
  assert(eventInfo);

  //numbers taken from https://twiki.cern.ch/twiki/bin/view/CMS/JetResolution
  // from 8TeV JER measurement.
  constexpr const size_t n = 7;
  static float eta_hi[n] = {0.5, 1.1, 1.7, 2.3, 2.8, 3.2, 5.0};
  static float c_nominal[n] = {1.079, 1.099, 1.121, 1.208, 1.254, 1.395, 1.056};
  // static float c_up[n] = {1.105, 1.127, 1.150, 1.254, 1.316, 1.458, 1.247};
  // static float c_down[n] = {1.053, 1.071, 1.092, 1.162, 1.192, 1.332, 0.865};

  Int_t njets = js.GetEntries();

  for(int i=0; i < njets; ++i) {
    baconhep::TJet* jet = (baconhep::TJet*)js[i];

    float genpt = jet->genpt;
    //ignore unmatched jets (which have zero vector) or jets with very low pt:
    if(genpt < 15.0) continue;

   // double jet_v4; 
//     LorentzVector jet_v4 = jet.v4();
//     LorentzVector jet_v4_raw = jet_v4 * jet->ptRaw;
    float recopt = jet->pt;
    float abseta = fabs(jet->eta);
    size_t ieta = 0;
    while(ieta < n && eta_hi[ieta] < abseta) ++ieta;
    if(ieta == n) ieta = n-1;
    float c;
    c = c_nominal[ieta];
    float new_pt = std::max(0.0f, genpt + c * (recopt - genpt));
       // jet_v4 *= new_pt / recopt;
    //jet.set(new_pt);
    jet->pt = new_pt;
        //jet->pt = new_pt / recopt;
      //  jet.set_v4(new_pt / recopt);
//propagate JER shifts to MET by using same factor, but for raw jet p4:
// if(smear_met){
// met += jet_v4_raw;
// jet_v4_raw *= new_pt / recopt;
// met -= jet_v4_raw;
// }
// }
// //store changed MET
// if(event.met) {
// event.met->set_pt(met.Pt());
// event.met->set_phi(met.Phi());
// }
    }
    return true;
}

bool Selection::FullSelection()
{
    return Trigger()&&DiJet()&&DiJetAdvanced()&&JetMatching()&&JetResolutionSmearer();

}

Selection::~Selection()
{
}

}